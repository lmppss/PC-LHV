# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZkgJpsrPLf54vXV3wMqcJXu2RLl27OGj
"""

import streamlit as st
import numpy as np
import pandas as pd
import joblib
import datetime
import pytz
import plotly.graph_objects as go
import os
from io import BytesIO

# Cargar modelo
modelo = joblib.load("PC_0.8722_12.04.pkl")

# Ruta historial
historial_path = "historial_predicciones.csv"
if not os.path.exists(historial_path):
    pd.DataFrame(columns=["FechaHora", "Cenizas", "PC", "Analista"]).to_csv(historial_path, index=False)

# Lista de analistas
analistas = sorted(["Giomara C.", "Walter G.", "Julio O.", "Jhony V.", "Kenyi A."])
analista_seleccionado = st.selectbox("üë§ Seleccione el analista:", analistas + ["Otros"])

# T√≠tulo
st.title("üî• Predicci√≥n del Poder Calor√≠fico del Carb√≥n")
st.markdown("Ingrese los datos manualmente o pegue una fila completa separada por **coma, espacio o tabulaci√≥n**.")

# Entrada r√°pida
st.subheader("üìã Entrada r√°pida (una l√≠nea completa)")
entrada_linea = st.text_input("Pegue aqu√≠ una fila completa con los 11 valores en orden:")

# Mostrar entrada manual
if "mostrar_manual" not in st.session_state:
    st.session_state.mostrar_manual = False

if st.button("üìù Mostrar entrada manual"):
    st.session_state.mostrar_manual = not st.session_state.mostrar_manual

if st.session_state.mostrar_manual:
    cenizas_bs = st.number_input("Cenizas (BS) (%)", min_value=0.0)
    sio2 = st.number_input("SiO2 ash (%)", min_value=0.0)
    al2o3 = st.number_input("Al2O3 ash (%)", min_value=0.0)
    fe2o3 = st.number_input("Fe2O3 ash (%)", min_value=0.0)
    cao = st.number_input("CaO ash (%)", min_value=0.0)
    mgo = st.number_input("MgO ash (%)", min_value=0.0)
    so3 = st.number_input("SO3 ash (%)", min_value=0.0)
    na2o = st.number_input("Na2O ash (%)", min_value=0.0)
    k2o = st.number_input("K2O ash (%)", min_value=0.0)
    s_carbon = st.number_input("S carb√≥n (%)", min_value=0.0)
    cl_carbon = st.number_input("Cl carb√≥n (%)", min_value=0.0)

# Validaci√≥n
def validar_entrada(entrada):
    entrada = entrada.replace(",", ".")
    if entrada == "":
        return False
    try:
        valores = list(map(float, entrada.strip().split()))
        if len(valores) != 11:
            return False
    except ValueError:
        return False
    return True

# Bot√≥n predecir
if st.button("üîÆ Predecir Poder Calor√≠fico"):
    if entrada_linea:
        if not validar_entrada(entrada_linea):
            st.error("‚ö†Ô∏è El formato de la entrada es incorrecto. Aseg√∫rese de ingresar 11 valores num√©ricos.")
            st.stop()

        sep = "," if "," in entrada_linea else "\t" if "\t" in entrada_linea else " "
        try:
            valores = list(map(float, entrada_linea.strip().split(sep)))
            if len(valores) != 11:
                st.error("‚ö†Ô∏è Debe ingresar exactamente 11 valores.")
                st.stop()
        except:
            st.error("‚ö†Ô∏è Error en el formato de la l√≠nea pegada.")
            st.stop()
    else:
        valores = [cenizas_bs, sio2, al2o3, fe2o3, cao, mgo, so3, na2o, k2o, s_carbon, cl_carbon]

    valores_np = np.array(valores).reshape(1, -1)
    pc_predicho = modelo.predict(valores_np)[0]
    pc_entero = int(round(pc_predicho))

    st.success(f"üî• Poder Calor√≠fico Predicho: **{pc_entero} kcal/kg**")

    ahora_lima = datetime.datetime.now(pytz.timezone('America/Lima'))
    nuevo = pd.DataFrame([{
        "FechaHora": ahora_lima.strftime('%Y-%m-%d %H:%M:%S'),
        "Cenizas": valores[0],
        "PC": pc_entero,
        "Analista": analista_seleccionado
    }])
    historial = pd.read_csv(historial_path)
    historial = pd.concat([historial, nuevo], ignore_index=True).tail(20)
    historial.to_csv(historial_path, index=False)

# Leer historial
historial = pd.read_csv(historial_path)

if not historial.empty:
    historial["FechaHora"] = pd.to_datetime(historial["FechaHora"], errors='coerce')
    historial["FechaHora"] = historial["FechaHora"].dt.tz_localize("America/Lima", ambiguous='NaT', nonexistent='shift_forward')
    historial = historial.sort_values("FechaHora").tail(20)

    st.subheader("üìà Historial de Predicciones (√∫ltimos 20)")

    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=historial["FechaHora"],
        y=historial["PC"],
        mode="lines",
        name="Tendencia PC",
        line=dict(color="orange", width=2)
    ))

    fig.add_trace(go.Scatter(
        x=historial["FechaHora"],
        y=historial["PC"],
        mode="markers",
        name="Predicciones",
        marker=dict(
            size=historial["Cenizas"] * 2,
            color=historial["Analista"].astype('category').cat.codes,
            colorscale='Viridis',
            colorbar=dict(
                title="Analista",
                tickvals=list(range(len(historial["Analista"].unique()))),
                ticktext=historial["Analista"].unique(),
                len=0.75
            ),
            showscale=True,
            line=dict(width=0.5, color='white')
        ),
        text=[
            f"Analista: {a}<br>PC: {p:.0f} kcal/kg<br>Cenizas: {c:.2f}%"
            for a, p, c in zip(historial["Analista"], historial["PC"], historial["Cenizas"])
        ],
        hoverinfo="text"
    ))

    fig.update_layout(
        title="Poder Calor√≠fico vs Fecha (√∫ltimos 20 registros)",
        xaxis_title="Fecha y Hora",
        yaxis_title="Poder Calor√≠fico (kcal/kg)",
        template="plotly_dark",
        hovermode="closest",
        height=500
    )

    st.plotly_chart(fig, use_container_width=True)

    st.subheader("üóÉÔ∏è Resumen de predicciones recientes (√∫ltimos 20)")
    historial_df = pd.read_csv(historial_path)[["FechaHora", "Cenizas", "PC", "Analista"]]
    historial_df["Eliminar"] = False
    edited_df = st.data_editor(historial_df, num_rows="dynamic", use_container_width=True)

    if st.button("‚ùå Eliminar seleccionadas"):
        eliminadas = edited_df[edited_df["Eliminar"] == True]
        if not eliminadas.empty:
            historial_df = edited_df[edited_df["Eliminar"] == False].drop(columns=["Eliminar"])
            historial_df.to_csv(historial_path, index=False)
            st.success(f"Se eliminaron {len(eliminadas)} predicciones.")
            st.rerun()
        else:
            st.warning("No se seleccionaron filas para eliminar.")

    st.subheader("üì• Descargar historial completo")
    df_completo = pd.read_csv(historial_path)
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
        df_completo.to_excel(writer, index=False, sheet_name='Historial')
    st.download_button(
        label="üìÑ Descargar en Excel",
        data=buffer.getvalue(),
        file_name="historial_predicciones.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )