# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZkgJpsrPLf54vXV3wMqcJXu2RLl27OGj
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import joblib
import os
import datetime
import pytz

# Configuración inicial
st.set_page_config(layout="wide")

# Cargar modelo
modelo = joblib.load("PC_model.pkl")

# Cargar historial si existe
archivo_historial = "historial_predicciones.csv"
if os.path.exists(archivo_historial):
    historial = pd.read_csv(archivo_historial)
else:
    historial = pd.DataFrame(columns=["FechaHora", "SiO2 (%)", "Al2O3 (%)", "Fe2O3 (%)", "CaO (%)",
                                      "MgO (%)", "SO3 (%)", "Na2O (%)", "K2O (%)", "S carbón (%)",
                                      "Cl carbón (%)", "Cenizas (BS) (%)", "PC predicho"])

# Entrada manual de datos dentro de un contenedor colapsable
with st.expander("Ingresar datos manualmente"):
    siO2 = st.number_input("SiO2 (%)", value=0.0)
    al2O3 = st.number_input("Al2O3 (%)", value=0.0)
    fe2O3 = st.number_input("Fe2O3 (%)", value=0.0)
    cao = st.number_input("CaO (%)", value=0.0)
    mgo = st.number_input("MgO (%)", value=0.0)
    so3 = st.number_input("SO3 (%)", value=0.0)
    na2o = st.number_input("Na2O (%)", value=0.0)
    k2o = st.number_input("K2O (%)", value=0.0)
    s_carbon = st.number_input("S carbón (%)", value=0.0)
    cl_carbon = st.number_input("Cl carbón (%)", value=0.0)
    cenizas_bs = st.number_input("Cenizas (BS) (%)", value=0.0)

    if st.button("Predecir Poder Calorífico"):
        # Preparar datos de entrada
        entrada = pd.DataFrame([{
            "SiO2 (%)": siO2, "Al2O3 (%)": al2O3, "Fe2O3 (%)": fe2O3, "CaO (%)": cao,
            "MgO (%)": mgo, "SO3 (%)": so3, "Na2O (%)": na2o, "K2O (%)": k2o,
            "S carbón (%)": s_carbon, "Cl carbón (%)": cl_carbon, "Cenizas (BS) (%)": cenizas_bs
        }])

        # Realizar predicción
        pred = modelo.predict(entrada)[0]
        st.success(f"Poder Calorífico Inferior predicho: {pred:.2f} kcal/kg")

        # Obtener fecha y hora local de Perú
        peru_tz = pytz.timezone("America/Lima")
        ahora_peru = datetime.datetime.now(peru_tz)

        # Guardar en historial
        nuevo_registro = entrada.copy()
        nuevo_registro["FechaHora"] = ahora_peru
        nuevo_registro["PC predicho"] = pred
        historial = pd.concat([historial, nuevo_registro], ignore_index=True)
        historial.to_csv(archivo_historial, index=False)

# Asegurar formato datetime para 'FechaHora'
historial["FechaHora"] = pd.to_datetime(historial["FechaHora"], errors="coerce")
historial = historial.dropna(subset=["FechaHora"])

# Filtrar últimos 3 días
hoy = datetime.datetime.now(pytz.timezone("America/Lima"))
fecha_3_dias_atras = hoy - datetime.timedelta(days=3)
historial_filtrado = historial[historial["FechaHora"] >= fecha_3_dias_atras]

# Mostrar gráfico
if not historial_filtrado.empty:
    fig = px.scatter(
        historial_filtrado,
        x="FechaHora",
        y="PC predicho",
        size="Cenizas (BS) (%)",
        color="Cenizas (BS) (%)",
        title="Poder Calorífico Inferior - Últimos 3 días",
        labels={"PC predicho": "PC (kcal/kg)"},
        height=600  # Agrandar gráfico
    )
    fig.update_layout(xaxis_title="Fecha y Hora", yaxis_title="PC predicho (kcal/kg)")
    st.plotly_chart(fig, use_container_width=True)
else:
    st.info("No hay datos de los últimos 3 días para mostrar en el gráfico.")

# Mostrar historial completo si se desea
with st.expander("Ver historial completo"):
    st.dataframe(historial.sort_values("FechaHora", ascending=False), use_container_width=True)