# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZkgJpsrPLf54vXV3wMqcJXu2RLl27OGj
"""

import streamlit as st
import numpy as np
import pandas as pd
import joblib
import datetime
import pytz
import plotly.express as px
import os

# Cargar el modelo .pkl
modelo = joblib.load("PC_0.8722_12.04.pkl")

# Archivo temporal para guardar predicciones
historial_path = "historial_predicciones.csv"
if not os.path.exists(historial_path):
    pd.DataFrame(columns=["FechaHora", "Cenizas", "PC"]).to_csv(historial_path, index=False)

# T√≠tulo de la app
st.title("üî• Predicci√≥n del Poder Calor√≠fico del Carb√≥n")
st.markdown("Ingrese los datos manualmente o pegue una fila completa separada por **coma, espacio o tabulaci√≥n**.")

# Opci√≥n de entrada r√°pida
st.subheader("üìã Entrada r√°pida (una l√≠nea completa)")
entrada_linea = st.text_input("Pegue aqu√≠ una fila completa con los 11 valores en orden:")

# Bot√≥n para activar la entrada manual
mostrar_entrada_manual = st.button("üìù Mostrar entrada manual")

# Si se presiona el bot√≥n, se muestran los campos de entrada manual
if mostrar_entrada_manual:
    cenizas_bs = st.number_input("Cenizas (BS) (%)", min_value=0.0)
    sio2 = st.number_input("SiO2 ash (%)", min_value=0.0)
    al2o3 = st.number_input("Al2O3 ash (%)", min_value=0.0)
    fe2o3 = st.number_input("Fe2O3 ash (%)", min_value=0.0)
    cao = st.number_input("CaO ash (%)", min_value=0.0)
    mgo = st.number_input("MgO ash (%)", min_value=0.0)
    so3 = st.number_input("SO3 ash (%)", min_value=0.0)
    na2o = st.number_input("Na2O ash (%)", min_value=0.0)
    k2o = st.number_input("K2O ash (%)", min_value=0.0)
    s_carbon = st.number_input("S carb√≥n (%)", min_value=0.0)
    cl_carbon = st.number_input("Cl carb√≥n (%)", min_value=0.0)

# Bot√≥n de predicci√≥n
if st.button("üîÆ Predecir Poder Calor√≠fico"):
    if entrada_linea:
        # Detectar separador
        if "," in entrada_linea:
            sep = ","
        elif "\t" in entrada_linea:
            sep = "\t"
        else:
            sep = " "
        try:
            valores = list(map(float, entrada_linea.strip().split(sep)))
            if len(valores) != 11:
                st.error("‚ö†Ô∏è Debe ingresar exactamente 11 valores.")
                st.stop()
        except:
            st.error("‚ö†Ô∏è Error en el formato de la l√≠nea pegada.")
            st.stop()
    else:
        valores = [cenizas_bs, sio2, al2o3, fe2o3, cao, mgo, so3, na2o, k2o, s_carbon, cl_carbon]

    valores_np = np.array(valores).reshape(1, -1)
    pc_predicho = modelo.predict(valores_np)[0]
    pc_entero = int(round(pc_predicho))

    # Mostrar resultado
    st.success(f"üî• Poder Calor√≠fico Predicho: **{pc_entero} kcal/kg**")

    # Convertir a hora de Per√∫
    peru_tz = pytz.timezone('America/Lima')
    fecha_hora_peru = datetime.datetime.now(peru_tz)

    # Guardar en historial
    nuevo = pd.DataFrame([{
        "FechaHora": fecha_hora_peru,
        "Cenizas": valores[0],
        "PC": pc_entero
    }])
    historial = pd.read_csv(historial_path)
    historial = pd.concat([historial, nuevo], ignore_index=True)
    historial.to_csv(historial_path, index=False)

    # Filtrar para mostrar solo los datos de los √∫ltimos 3 d√≠as
    fecha_3_dias_atras = fecha_hora_peru - pd.Timedelta(days=3)
    historial_filtrado = historial[historial["FechaHora"] >= fecha_3_dias_atras]

    # Mostrar gr√°fico
    st.subheader("üìà Historial de Predicciones")
    fig = px.scatter(historial_filtrado, x="FechaHora", y="PC",
                     size="Cenizas", color="Cenizas",
                     hover_data=["Cenizas", "PC"],
                     title="Predicciones de Poder Calor√≠fico vs Cenizas",
                     labels={"PC": "Poder Calor√≠fico (kcal/kg)", "FechaHora": "Hora"},
                     template="plotly_dark")

    fig.update_traces(mode="markers+lines")
    fig.update_layout(
        autosize=True,
        margin=dict(l=50, r=50, t=50, b=50),
        height=600
    )
    st.plotly_chart(fig, use_container_width=True)

    # Entrada para eliminar un punto
    st.subheader("üßπ Eliminar un punto del gr√°fico")
    indice_a_eliminar = st.number_input("Ingrese el √≠ndice del punto a eliminar", min_value=0, max_value=len(historial)-1)
    if st.button("Eliminar punto"):
        if indice_a_eliminar is not None:
            historial = historial.drop(historial.index[indice_a_eliminar])
            historial.to_csv(historial_path, index=False)
            st.success("‚úÖ Punto eliminado correctamente.")

        # Mostrar el gr√°fico actualizado
        historial_filtrado = historial[historial["FechaHora"] >= fecha_3_dias_atras]
        fig = px.scatter(historial_filtrado, x="FechaHora", y="PC",
                         size="Cenizas", color="Cenizas",
                         hover_data=["Cenizas", "PC"],
                         title="Predicciones de Poder Calor√≠fico vs Cenizas",
                         labels={"PC": "Poder Calor√≠fico (kcal/kg)", "FechaHora": "Hora"},
                         template="plotly_dark")

        fig.update_traces(mode="markers+lines")
        st.plotly_chart(fig, use_container_width=True)