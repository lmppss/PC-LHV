# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZkgJpsrPLf54vXV3wMqcJXu2RLl27OGj
"""

from datetime import datetime, timedelta
import pytz
import pandas as pd
import numpy as np
import joblib
import streamlit as st
import plotly.express as px
import os

# Cargar modelo
modelo = joblib.load("PC_0.8722_12.04.pkl")

# Ruta historial
historial_path = "historial_predicciones.csv"
if not os.path.exists(historial_path):
    pd.DataFrame(columns=["FechaHora", "Cenizas", "PC"]).to_csv(historial_path, index=False)

# Streamlit App
st.title("🔥 Predicción del Poder Calorífico del Carbón")
st.markdown("Ingrese los datos manualmente o pegue una fila completa separada por **coma, espacio o tabulación**.")

st.subheader("📋 Entrada rápida (una línea completa)")
entrada_linea = st.text_input("Pegue aquí una fila completa con los 11 valores en orden:")
mostrar_entrada_manual = st.button("📝 Mostrar entrada manual")

if mostrar_entrada_manual:
    cenizas_bs = st.number_input("Cenizas (BS) (%)", min_value=0.0)
    sio2 = st.number_input("SiO2 ash (%)", min_value=0.0)
    al2o3 = st.number_input("Al2O3 ash (%)", min_value=0.0)
    fe2o3 = st.number_input("Fe2O3 ash (%)", min_value=0.0)
    cao = st.number_input("CaO ash (%)", min_value=0.0)
    mgo = st.number_input("MgO ash (%)", min_value=0.0)
    so3 = st.number_input("SO3 ash (%)", min_value=0.0)
    na2o = st.number_input("Na2O ash (%)", min_value=0.0)
    k2o = st.number_input("K2O ash (%)", min_value=0.0)
    s_carbon = st.number_input("S carbón (%)", min_value=0.0)
    cl_carbon = st.number_input("Cl carbón (%)", min_value=0.0)

if st.button("🔮 Predecir Poder Calorífico"):
    if entrada_linea:
        if "," in entrada_linea:
            sep = ","
        elif "\t" in entrada_linea:
            sep = "\t"
        else:
            sep = " "
        try:
            valores = list(map(float, entrada_linea.strip().split(sep)))
            if len(valores) != 11:
                st.error("⚠️ Debe ingresar exactamente 11 valores.")
                st.stop()
        except:
            st.error("⚠️ Error en el formato de la línea pegada.")
            st.stop()
    else:
        valores = [cenizas_bs, sio2, al2o3, fe2o3, cao, mgo, so3, na2o, k2o, s_carbon, cl_carbon]

    valores_np = np.array(valores).reshape(1, -1)
    pc_predicho = modelo.predict(valores_np)[0]
    pc_entero = int(round(pc_predicho))
    st.success(f"🔥 Poder Calorífico Predicho: **{pc_entero} kcal/kg**")

    nueva_fila = pd.DataFrame([{
        "FechaHora": datetime.now(pytz.timezone('America/Lima')).strftime('%Y-%m-%d %H:%M:%S'),
        "Cenizas": valores[0],
        "PC": pc_entero
    }])
    historial = pd.read_csv(historial_path)
    historial = pd.concat([historial, nueva_fila], ignore_index=True)
    historial.to_csv(historial_path, index=False)

# Leer historial actualizado
historial = pd.read_csv(historial_path)
historial["FechaHora"] = pd.to_datetime(historial["FechaHora"], errors='coerce')
historial["FechaHora"] = historial["FechaHora"].dt.tz_localize(None)

# Mostrar gráfico con últimos 3 días
fecha_limite = datetime.now(pytz.timezone('America/Lima')).replace(tzinfo=None) - timedelta(days=3)
historial_filtrado = historial[historial["FechaHora"] >= fecha_limite] if not historial.empty else historial

st.subheader("📈 Historial de Predicciones")
fig = px.scatter(historial_filtrado, x="FechaHora", y="PC",
                 size="Cenizas", color="Cenizas",
                 hover_data=["Cenizas", "PC"],
                 title="Predicciones de Poder Calorífico vs Cenizas",
                 labels={"PC": "Poder Calorífico (kcal/kg)", "FechaHora": "Hora"},
                 template="plotly_dark")
fig.update_traces(mode="markers+lines")
st.plotly_chart(fig, use_container_width=True)

# Mostrar historial en tabla
st.subheader("📋 Tabla de Historial")
historial['FechaHora'] = historial['FechaHora'].astype(str)
row_to_delete = st.multiselect(
    "Seleccione filas para eliminar del historial:",
    options=historial.index.tolist(),
    format_func=lambda i: f"{historial.loc[i, 'FechaHora']} - {historial.loc[i, 'PC']} kcal/kg"
)
if st.button("🗑️ Eliminar filas seleccionadas"):
    historial = historial.drop(index=row_to_delete)
    historial.to_csv(historial_path, index=False)
    st.success("✅ Filas eliminadas correctamente.")
    st.experimental_rerun()